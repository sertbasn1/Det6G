/*
 * wTSNGateScheduleConfigurator.cc
 *
 *  Created on: May 20, 2025
 *      Author: root
 */


#include "inet/linklayer/configurator/gatescheduling/common/wTSNGateScheduleConfigurator.h"

namespace inet {

Define_Module(wTSNGateScheduleConfigurator);

void wTSNGateScheduleConfigurator::triggerGateScheduling(std::vector<StreamRegistrationRequest> requests){
    // TODO: Create Inout structure as in omnet implementation
    const Input& input =  new Input();

    Output * out = computeGateScheduling(input);

    //TODO: check implementation details
    //1: Gate schedules


    //2: application start times
    std::vector<StreamStatus> talkerUpdates;
    return talkerUpdates;

}

wTSNGateScheduleConfigurator::Output *wTSNGateScheduleConfigurator::computeGateScheduling(const Input& input) const{


    //opt call
      std::vector<StreamRegistrationResponse> responses = get_optimal_assignments(requests);
      Py_Initialize();
      get_optimal_assignments();
      Py_Finalize();

      //get_simulated_optimal_assignments();


    auto output = new Output();

    std::map<Input::Port *, std::vector<Schedule *>> gateSchedules; // maps ports to schedules per traffic class
    std::map<Input::Application *, simtime_t> applicationStartTimes; // maps applications to start times

    //TODO

    output->gateSchedules = gateSchedules;
    output->applicationStartTimes = applicationStartTimes;
    return output;
}

void wTSNGateScheduleConfigurator::get_simulated_optimal_assignments() {
        //std::vector<StreamRegistrationResponse> responses ;
        //return  responses ;
}


void wTSNGateScheduleConfigurator::get_optimal_assignments() {
        PyRun_SimpleString("import sys");
        PyRun_SimpleString("sys.path.append(\".\")");

        PyObject *pName, *pModule, *pDict, *pFunc, *pArgs, *pList, *pList_assignments;

        pName = PyUnicode_DecodeFSDefault("omnettest");
        pModule = PyImport_Import(pName);       // loaded script

        if(pModule == NULL)
            throw std::invalid_argument("Script cannot be loaded.\n");

        pDict = PyModule_GetDict(pModule);
        pFunc = PyDict_GetItemString(pDict, "main"); // load function

        PyObject* pResult = PyObject_CallObject(pFunc, nullptr); // call function

        //TODO: parse returned values

        //std::vector<StreamRegistrationResponse> responses ;
        //return  responses ;
}



} // namespace inet



