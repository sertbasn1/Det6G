/*
 * CentralNetworkConfig.cc
 *
 *  Created on: May 5, 2025
 *      Author: root
 */
#include "CentralNetworkConfig.h"
#include "CentralUserConfig.h"
namespace inet{

Define_Module(CentralNetworkConfig);

void CentralNetworkConfig::initialize()
{
    topology = new Topology();
    extractTopology(*topology);
    //printTopology();
    printIndexMapping();
}


void CentralNetworkConfig::printTopology(){
    cout<<"======Extracted _topology======="<<endl;
    cout<<topology->getNumNodes()<<" nodes has been detected"<< endl;
    for (int i = 0; i < topology->getNumNodes(); ++i) {
        const Topology::Node *node = topology->getNode(i);
        int numOfOut = node->getNumOutLinks();

        cout << "Node("<< node->getModule()->getId() << ")"<< node->getModule()->getFullName() << " with "<< numOfOut << " outgoing links." << endl;

        for (int i=0; i<numOfOut; i++) {
            Topology::Link * link = node->getLinkOut(i);

            cout << "  --> connects to Node("<< link->getLinkOutRemoteNode()->getModule()->getId() << ")" << link->getLinkOutRemoteNode()->getModule()->getFullName()
                       << " via gate: " << link->getLinkOutLocalGate()->getFullName() << endl;
        }

        topoIndices[i] = node->getModule()->getId();
    }
    cout<<"====== ====== ====== ======="<<endl;

    //Test find module by id
//    cModule *mod = this->getSimulation()->getModule(11);
//    if (mod)
//        cout << "Found module: " << mod->getFullPath() << endl; //simpleTsn.device2
//    else
//        cout << "Module not found!" << endl;
//

}

void CentralNetworkConfig::printIndexMapping() {
    cout<<"TopoIndex\tModuleId"<<endl;
    for (const auto& pair : topoIndices) {
            cout << pair.first << "\t\t" << pair.second << "\t"<< this->getSimulation()->getModule(pair.second)->getFullName() << endl;
        }

}


int CentralNetworkConfig::getTopoIndex(int moduleid) {
    for(int i=0;i<topology->getNumNodes();i++){
        if(moduleid==topology->getNode(i)->getModuleId()){
            return i;
        }
    }
    return -1;
}

int CentralNetworkConfig::registerStream(StreamRegistrationRequest * req){
    cout<< this->getFullName() << " is trying to embed stream "<< req->sid << endl;

    //opt call

    //return from opt

    //    for (int i = 0; i < _topology->getNumNodes(); i++) {
    //            auto node = (Node *)_topology->getNode(i);
    //            auto networkNode = node->module;
    //            for (auto interface : node->interfaces) {
    //                auto queue = interface->networkInterface->findModuleByPath(".macLayer.queue");
    //                if (queue != nullptr) {
    //                    for (cModule::SubmoduleIterator it(queue); !it.end(); ++it) {
    //                        cModule *gate = *it;
    //                        if (dynamic_cast<queueing::PeriodicGate *>(gate) != nullptr)
    //                            configureGateScheduling(networkNode, gate, interface);
    //                    }
    //                }
    //            }
    //        }

    cModule * targetDev =  this->cSimpleModule::getParentModule()->cSimpleModule::getParentModule()->getSubmodule("bridge1");
    cout<<targetDev->gateCount()<<" gates"<<endl;
    //
    //        //targetDev->getSubmodule("eth", 2);
    //        std::vector<std::string> tm = targetDev->getGateNames();
    //        for(string ix:tm)
    //            cout<<ix<<"\t";

    //configureGate(cModule *gate,  bool initiallyOpen, simtime_t offset, vector<double> times);

    vector<StreamRegistrationResponse> returnedAssignments;
    StreamRegistrationResponse sr = StreamRegistrationResponse();
    returnedAssignments.push_back(sr);

    StreamStatus tmpStream = StreamStatus(req->sid,true,0.0);
    if(returnedAssignments.size()==0){
        //inform talker, reject
        tmpStream.status = false;
    }
    else{
        //successful stream embedding
        for (std::vector<StreamRegistrationResponse>::iterator it = returnedAssignments.begin() ; it != returnedAssignments.end(); ++it){
            StreamRegistrationResponse tmp=*it;
            // todo

            //configure network

            //inform talker, success
            tmpStream.status = true;
            tmpStream.talkerOffset = 0.0;
        }
    }

    cout<<this->getParentModule()->getFullName();

    //CentralUserConfig *cuc = check_and_cast<CentralUserConfig *>((this->cSimpleModule::getParentModule())->getSubmodule("cuc"));
    //cuc->informTalker(tmpStream);

    return 0;
}

void CentralNetworkConfig::configureGate(cModule *gate,  bool initiallyOpen, simtime_t offset, vector<simtime_t> times){
    int gateIndex = gate->getIndex();
    gate->par("initiallyOpen") = initiallyOpen;
    gate->par("offset") = offset.dbl();

    cValueArray *durations = new cValueArray();

    //std::vector<cValueArray *> durations;

    for(simtime_t t:times){
        durations->add(cValue(t.dbl(), "s"));
    }
    cPar& durationsPar = gate->par("durations");
    durationsPar.copyIfShared();
    durationsPar.setObjectValue(durations);

}

}
