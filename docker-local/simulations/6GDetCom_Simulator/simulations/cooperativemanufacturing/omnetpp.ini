[General]
network = d6g.simulations.cooperativemanufacturing.CooperativeManufacturing
sim-time-limit = 10s
description = "Baseline Scenario with 6gDetCom node"

**.displayGateSchedules = false
**.gateFilter = "**.eth[1].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"


[OnlyAgvToCell]
# client applications
*.agv1.numApps = 1
*.agv2.numApps = 1

*.processingCell.swarmStatus.numApps = 2

*.agv1.app[0].typename = "UdpSourceApp"
*.agv1.app[0].display-name = "swarmStatus1"
*.agv1.app[0].io.destAddress = "processingCell.swarmStatus"
*.agv1.app[0].io.destPort = 1000
*.agv1.app[0].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.agv1.app[0].source.productionInterval = 1ms

*.processingCell.swarmStatus.app[0].typename = "UdpSinkApp"
*.processingCell.swarmStatus.app[0].io.localPort = 1000

*.agv2.app[0].typename = "UdpSourceApp"
*.agv2.app[0].display-name = "swarmStatus2"
*.agv2.app[0].io.destAddress = "processingCell.swarmStatus"
*.agv2.app[0].io.destPort = 1001
*.agv2.app[0].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.agv2.app[0].source.productionInterval = 1ms
*.agv2.app[0].source.initialProductionOffset = 80960ns

*.processingCell.swarmStatus.app[1].typename = "UdpSinkApp"
*.processingCell.swarmStatus.app[1].io.localPort = 1001

# enable outgoing streams
**.hasOutgoingStreams = true
**.streamIdentifier.identifier.mapping = [{stream: "swarmStatus1", packetFilter: expr(udp.destPort == 1000)},
                                                   {stream: "swarmStatus2", packetFilter: expr(udp.destPort == 1001)}]

**.streamCoder.*.mapping = [{stream: "swarmStatus1", pcp: 7},
									 {stream: "swarmStatus2", pcp: 7}]

[ConstantDelay]
extends = OnlyAgvToCell
*.detCom.dstt[*].delayUplink = 100us

[OneVariable]
extends = OnlyAgvToCell
*.detCom.delayConfig = xmldoc("onevariable.xml")


[Gcl]
*.detCom.nwtt.eth[*].macLayer.queue.transmissionGate[0].initiallyOpen = false
*.detCom.nwtt.eth[*].macLayer.queue.transmissionGate[0].offset = 0s
*.detCom.nwtt.eth[*].macLayer.queue.transmissionGate[0].durations = []

*.detCom.nwtt.eth[*].macLayer.queue.transmissionGate[1].initiallyOpen = true
*.detCom.nwtt.eth[*].macLayer.queue.transmissionGate[1].offset = 819.95us
*.detCom.nwtt.eth[*].macLayer.queue.transmissionGate[1].durations = [161us,839us]

[ConstantGcl]
extends = ConstantDelay,Gcl

[OneVariableGcl]
extends = OneVariable,Gcl

[OneVariableGclLongerOpen]
# For normal(100us, 10us) we use 3 sigma, which corresponds to a 99.7% confidence interval
# S1: 30us buffer + 80us open + 30us buffer
# + 1us IFG
# S2: +80us open
# = 221us
*.detCom.nwtt.eth[*].macLayer.queue.transmissionGate[1].durations = [221us,779us]
# We also need to move the offset to open the GCL 30us earlier:
*.detCom.nwtt.eth[*].macLayer.queue.transmissionGate[1].offset = 849.95us
extends = OneVariable,Gcl

[OneVariableGclMaximizeGap]
# We need to move the offset to open the GCL 30us earlier:
*.detCom.nwtt.eth[*].macLayer.queue.transmissionGate[1].offset = 849.95us
# S1: 30us buffer + 80us open + 30us buffer = 140us open
# S2: 80us open
*.detCom.nwtt.eth[*].macLayer.queue.transmissionGate[1].durations = [140us,390us,80us,390us]

# Adjust initialProductionOffset
*.agv2.app[0].source.initialProductionOffset = 500us
extends = OneVariable,Gcl

